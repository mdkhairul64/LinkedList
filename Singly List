#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    ///this is constructor
    /// 
    Node(int data)
    {
        this->data=data;
        this->next=NULL;   
    }
    ~Node()
    {
        int value=this->data;
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
    }
};

void insert_at_head(Node* & head,int d)
{
    Node*  temp=new Node(d);
    temp->next=head;
    head=temp;
}

void insert_at_tail(Node* &tail,int d)
{
    Node* temp=new Node(d);
    tail->next=temp;
    tail=tail->next;
}

///in this function i use head and tail for maintaing the update of head and tail

void insert_at_position(Node* &head,Node* &tail,int position,int d)
{
    ///inserting at first position
    if(position==1)
    {
        insert_at_head(head,d);
        return ;
    }
    Node* temp= head;

    int cnt=1;
    while(cnt<position-1)
    {
        temp=temp->next;
        cnt++;
    }

    ///inserting at last position
    
    if(temp->next==NULL)
    {
        insert_at_tail(tail,d);
        return ;
    }
    Node* nodetoinsert=new Node(d);
    nodetoinsert->next=temp->next;
    temp->next=nodetoinsert; 
}


void delete_node(Node* &head,int position)
{
    if(position==1)
    {
        Node* temp=head;
        head=head->next;
        
        temp->next=NULL;
        delete temp;
        
    }
    else{
        Node* curr=head;
        Node* prev=NULL;

        int cnt=1;
        while(cnt<position)
        {
            prev=curr;
            curr=curr->next;
            cnt++;
        }

        prev->next=curr->next;
        
        curr->next=NULL;  ///to make free the memory i should null the value
        delete curr;
    }
}

void print_list(Node * &head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }cout<<endl;
}

int main()
{
    Node* node1=new Node(10);
    /// 
    // cout<<node1->data<<endl;
    // cout<<node1->next<<endl;

   

    Node *head=node1;
    Node * tail=node1;

     insert_at_head(head,12);

    print_list(head);

    insert_at_tail(tail,11);
    print_list(head);

    insert_at_position(head,tail,1,9);

    print_list(head);

    insert_at_position(head,tail,5,100);
    print_list(head);


    ///deleting a node
    delete_node(head,4);
    print_list(head);

    return 0;
}
